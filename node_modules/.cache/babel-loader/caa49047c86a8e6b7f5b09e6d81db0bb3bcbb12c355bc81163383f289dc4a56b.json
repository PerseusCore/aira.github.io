{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Perseus\\\\Desktop\\\\aira_website\\\\src\\\\components\\\\RobotVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RobotVisualization = ({\n  servoPositions\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xf0f0f0);\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 1000);\n    camera.position.z = 5;\n    camera.position.y = 1;\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(1, 1, 1);\n    scene.add(directionalLight);\n\n    // Robot parts\n    const robotParts = {};\n    const materials = {\n      body: new THREE.MeshPhongMaterial({\n        color: 0x6f42c1\n      }),\n      joint: new THREE.MeshPhongMaterial({\n        color: 0x444444\n      }),\n      limb: new THREE.MeshPhongMaterial({\n        color: 0x888888\n      })\n    };\n\n    // Create robot body\n    robotParts.torso = new THREE.Mesh(new THREE.BoxGeometry(1, 1.5, 0.5), materials.body);\n    scene.add(robotParts.torso);\n\n    // Head\n    robotParts.head = new THREE.Mesh(new THREE.SphereGeometry(0.3, 32, 32), materials.body);\n    robotParts.head.position.y = 1.1;\n    robotParts.torso.add(robotParts.head);\n\n    // Arms\n    // Left arm\n    robotParts.leftShoulder = new THREE.Mesh(new THREE.SphereGeometry(0.15, 32, 32), materials.joint);\n    robotParts.leftShoulder.position.set(-0.6, 0.6, 0);\n    robotParts.torso.add(robotParts.leftShoulder);\n    robotParts.leftUpperArm = new THREE.Mesh(new THREE.CylinderGeometry(0.08, 0.08, 0.5), materials.limb);\n    robotParts.leftUpperArm.position.y = -0.3;\n    robotParts.leftUpperArm.rotation.x = Math.PI / 2;\n    robotParts.leftShoulder.add(robotParts.leftUpperArm);\n    robotParts.leftElbow = new THREE.Mesh(new THREE.SphereGeometry(0.12, 32, 32), materials.joint);\n    robotParts.leftElbow.position.y = -0.6;\n    robotParts.leftShoulder.add(robotParts.leftElbow);\n    robotParts.leftForearm = new THREE.Mesh(new THREE.CylinderGeometry(0.07, 0.07, 0.5), materials.limb);\n    robotParts.leftForearm.position.y = -0.3;\n    robotParts.leftForearm.rotation.x = Math.PI / 2;\n    robotParts.leftElbow.add(robotParts.leftForearm);\n    robotParts.leftHand = new THREE.Mesh(new THREE.BoxGeometry(0.15, 0.2, 0.05), materials.body);\n    robotParts.leftHand.position.y = -0.6;\n    robotParts.leftElbow.add(robotParts.leftHand);\n\n    // Right arm\n    robotParts.rightShoulder = new THREE.Mesh(new THREE.SphereGeometry(0.15, 32, 32), materials.joint);\n    robotParts.rightShoulder.position.set(0.6, 0.6, 0);\n    robotParts.torso.add(robotParts.rightShoulder);\n    robotParts.rightUpperArm = new THREE.Mesh(new THREE.CylinderGeometry(0.08, 0.08, 0.5), materials.limb);\n    robotParts.rightUpperArm.position.y = -0.3;\n    robotParts.rightUpperArm.rotation.x = Math.PI / 2;\n    robotParts.rightShoulder.add(robotParts.rightUpperArm);\n    robotParts.rightElbow = new THREE.Mesh(new THREE.SphereGeometry(0.12, 32, 32), materials.joint);\n    robotParts.rightElbow.position.y = -0.6;\n    robotParts.rightShoulder.add(robotParts.rightElbow);\n    robotParts.rightForearm = new THREE.Mesh(new THREE.CylinderGeometry(0.07, 0.07, 0.5), materials.limb);\n    robotParts.rightForearm.position.y = -0.3;\n    robotParts.rightForearm.rotation.x = Math.PI / 2;\n    robotParts.rightElbow.add(robotParts.rightForearm);\n    robotParts.rightHand = new THREE.Mesh(new THREE.BoxGeometry(0.15, 0.2, 0.05), materials.body);\n    robotParts.rightHand.position.y = -0.6;\n    robotParts.rightElbow.add(robotParts.rightHand);\n\n    // Legs\n    // Left leg\n    robotParts.leftHip = new THREE.Mesh(new THREE.SphereGeometry(0.15, 32, 32), materials.joint);\n    robotParts.leftHip.position.set(-0.3, -0.8, 0);\n    robotParts.torso.add(robotParts.leftHip);\n    robotParts.leftThigh = new THREE.Mesh(new THREE.CylinderGeometry(0.1, 0.1, 0.6), materials.limb);\n    robotParts.leftThigh.position.y = -0.4;\n    robotParts.leftHip.add(robotParts.leftThigh);\n    robotParts.leftKnee = new THREE.Mesh(new THREE.SphereGeometry(0.12, 32, 32), materials.joint);\n    robotParts.leftKnee.position.y = -0.8;\n    robotParts.leftHip.add(robotParts.leftKnee);\n    robotParts.leftShin = new THREE.Mesh(new THREE.CylinderGeometry(0.08, 0.08, 0.6), materials.limb);\n    robotParts.leftShin.position.y = -0.4;\n    robotParts.leftKnee.add(robotParts.leftShin);\n    robotParts.leftFoot = new THREE.Mesh(new THREE.BoxGeometry(0.2, 0.1, 0.3), materials.body);\n    robotParts.leftFoot.position.y = -0.8;\n    robotParts.leftFoot.position.z = 0.1;\n    robotParts.leftKnee.add(robotParts.leftFoot);\n\n    // Right leg\n    robotParts.rightHip = new THREE.Mesh(new THREE.SphereGeometry(0.15, 32, 32), materials.joint);\n    robotParts.rightHip.position.set(0.3, -0.8, 0);\n    robotParts.torso.add(robotParts.rightHip);\n    robotParts.rightThigh = new THREE.Mesh(new THREE.CylinderGeometry(0.1, 0.1, 0.6), materials.limb);\n    robotParts.rightThigh.position.y = -0.4;\n    robotParts.rightHip.add(robotParts.rightThigh);\n    robotParts.rightKnee = new THREE.Mesh(new THREE.SphereGeometry(0.12, 32, 32), materials.joint);\n    robotParts.rightKnee.position.y = -0.8;\n    robotParts.rightHip.add(robotParts.rightKnee);\n    robotParts.rightShin = new THREE.Mesh(new THREE.CylinderGeometry(0.08, 0.08, 0.6), materials.limb);\n    robotParts.rightShin.position.y = -0.4;\n    robotParts.rightKnee.add(robotParts.rightShin);\n    robotParts.rightFoot = new THREE.Mesh(new THREE.BoxGeometry(0.2, 0.1, 0.3), materials.body);\n    robotParts.rightFoot.position.y = -0.8;\n    robotParts.rightFoot.position.z = 0.1;\n    robotParts.rightKnee.add(robotParts.rightFoot);\n\n    // Update robot based on servo positions\n    const updateRobotPose = () => {\n      if (!servoPositions) return;\n\n      // Convert servo values (0-180) to radians (-PI/2 to PI/2)\n      const convertToRad = value => {\n        return (value - 90) / 180 * Math.PI;\n      };\n\n      // Head\n      if (servoPositions.Head_Pan) {\n        robotParts.head.rotation.y = convertToRad(servoPositions.Head_Pan);\n      }\n      if (servoPositions.Head_Tilt) {\n        robotParts.head.rotation.x = convertToRad(servoPositions.Head_Tilt);\n      }\n\n      // Left arm\n      if (servoPositions.Left_Shoulder) {\n        robotParts.leftShoulder.rotation.x = convertToRad(servoPositions.Left_Shoulder);\n      }\n      if (servoPositions.Left_Elbow) {\n        robotParts.leftElbow.rotation.x = convertToRad(servoPositions.Left_Elbow);\n      }\n\n      // Right arm\n      if (servoPositions.Right_Shoulder) {\n        robotParts.rightShoulder.rotation.x = convertToRad(servoPositions.Right_Shoulder);\n      }\n      if (servoPositions.Right_Elbow) {\n        robotParts.rightElbow.rotation.x = convertToRad(servoPositions.Right_Elbow);\n      }\n\n      // Waist and torso\n      if (servoPositions.Waist) {\n        robotParts.torso.rotation.y = convertToRad(servoPositions.Waist);\n      }\n      if (servoPositions.Torso) {\n        robotParts.torso.rotation.x = convertToRad(servoPositions.Torso) / 2; // Reduced range\n      }\n\n      // Left leg\n      if (servoPositions.Left_Hip) {\n        robotParts.leftHip.rotation.x = convertToRad(servoPositions.Left_Hip);\n      }\n      if (servoPositions.Left_Knee) {\n        robotParts.leftKnee.rotation.x = convertToRad(servoPositions.Left_Knee);\n      }\n      if (servoPositions.Left_Ankle) {\n        robotParts.leftFoot.rotation.x = convertToRad(servoPositions.Left_Ankle);\n      }\n\n      // Right leg\n      if (servoPositions.Right_Hip) {\n        robotParts.rightHip.rotation.x = convertToRad(servoPositions.Right_Hip);\n      }\n      if (servoPositions.Right_Knee) {\n        robotParts.rightKnee.rotation.x = convertToRad(servoPositions.Right_Knee);\n      }\n      if (servoPositions.Right_Ankle) {\n        robotParts.rightFoot.rotation.x = convertToRad(servoPositions.Right_Ankle);\n      }\n\n      // Hand servos (simplified visualization)\n      if (servoPositions.Left_Wrist) {\n        robotParts.leftHand.rotation.z = convertToRad(servoPositions.Left_Wrist);\n      }\n      if (servoPositions.Right_Wrist) {\n        robotParts.rightHand.rotation.z = convertToRad(servoPositions.Right_Wrist);\n      }\n    };\n\n    // Initial update\n    updateRobotPose();\n\n    // Animation loop\n    let frameId;\n    const animate = () => {\n      frameId = requestAnimationFrame(animate);\n\n      // Rotate the scene slightly for better viewing\n      scene.rotation.y = Math.sin(Date.now() * 0.001) * 0.1;\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      camera.aspect = mountRef.current.clientWidth / mountRef.current.clientHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Update robot when servo positions change\n    const watchServoChanges = () => {\n      updateRobotPose();\n    };\n\n    // Watch for servo position changes\n    const watchInterval = setInterval(watchServoChanges, 100);\n\n    // Cleanup\n    return () => {\n      clearInterval(watchInterval);\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(frameId);\n      if (mountRef.current) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n    };\n  }, [servoPositions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '100%',\n      height: '300px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 326,\n    columnNumber: 10\n  }, this);\n};\n_s(RobotVisualization, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = RobotVisualization;\nexport default RobotVisualization;\nvar _c;\n$RefreshReg$(_c, \"RobotVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsxDEV","_jsxDEV","RobotVisualization","servoPositions","_s","mountRef","scene","Scene","background","Color","camera","PerspectiveCamera","current","clientWidth","clientHeight","position","z","y","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","set","robotParts","materials","body","MeshPhongMaterial","color","joint","limb","torso","Mesh","BoxGeometry","head","SphereGeometry","leftShoulder","leftUpperArm","CylinderGeometry","rotation","x","Math","PI","leftElbow","leftForearm","leftHand","rightShoulder","rightUpperArm","rightElbow","rightForearm","rightHand","leftHip","leftThigh","leftKnee","leftShin","leftFoot","rightHip","rightThigh","rightKnee","rightShin","rightFoot","updateRobotPose","convertToRad","value","Head_Pan","Head_Tilt","Left_Shoulder","Left_Elbow","Right_Shoulder","Right_Elbow","Waist","Torso","Left_Hip","Left_Knee","Left_Ankle","Right_Hip","Right_Knee","Right_Ankle","Left_Wrist","Right_Wrist","frameId","animate","requestAnimationFrame","sin","Date","now","render","handleResize","aspect","updateProjectionMatrix","window","addEventListener","watchServoChanges","watchInterval","setInterval","clearInterval","removeEventListener","cancelAnimationFrame","removeChild","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Perseus/Desktop/aira_website/src/components/RobotVisualization.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nconst RobotVisualization = ({ servoPositions }) => {\r\n  const mountRef = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    // Scene setup\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0xf0f0f0);\r\n    \r\n    // Camera setup\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75, \r\n      mountRef.current.clientWidth / mountRef.current.clientHeight, \r\n      0.1, \r\n      1000\r\n    );\r\n    camera.position.z = 5;\r\n    camera.position.y = 1;\r\n    \r\n    // Renderer setup\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\r\n    mountRef.current.appendChild(renderer.domElement);\r\n    \r\n    // Lighting\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n    scene.add(ambientLight);\r\n    \r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n    directionalLight.position.set(1, 1, 1);\r\n    scene.add(directionalLight);\r\n    \r\n    // Robot parts\r\n    const robotParts = {};\r\n    const materials = {\r\n      body: new THREE.MeshPhongMaterial({ color: 0x6f42c1 }),\r\n      joint: new THREE.MeshPhongMaterial({ color: 0x444444 }),\r\n      limb: new THREE.MeshPhongMaterial({ color: 0x888888 })\r\n    };\r\n    \r\n    // Create robot body\r\n    robotParts.torso = new THREE.Mesh(\r\n      new THREE.BoxGeometry(1, 1.5, 0.5),\r\n      materials.body\r\n    );\r\n    scene.add(robotParts.torso);\r\n    \r\n    // Head\r\n    robotParts.head = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.3, 32, 32),\r\n      materials.body\r\n    );\r\n    robotParts.head.position.y = 1.1;\r\n    robotParts.torso.add(robotParts.head);\r\n    \r\n    // Arms\r\n    // Left arm\r\n    robotParts.leftShoulder = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.15, 32, 32),\r\n      materials.joint\r\n    );\r\n    robotParts.leftShoulder.position.set(-0.6, 0.6, 0);\r\n    robotParts.torso.add(robotParts.leftShoulder);\r\n    \r\n    robotParts.leftUpperArm = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(0.08, 0.08, 0.5),\r\n      materials.limb\r\n    );\r\n    robotParts.leftUpperArm.position.y = -0.3;\r\n    robotParts.leftUpperArm.rotation.x = Math.PI / 2;\r\n    robotParts.leftShoulder.add(robotParts.leftUpperArm);\r\n    \r\n    robotParts.leftElbow = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.12, 32, 32),\r\n      materials.joint\r\n    );\r\n    robotParts.leftElbow.position.y = -0.6;\r\n    robotParts.leftShoulder.add(robotParts.leftElbow);\r\n    \r\n    robotParts.leftForearm = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(0.07, 0.07, 0.5),\r\n      materials.limb\r\n    );\r\n    robotParts.leftForearm.position.y = -0.3;\r\n    robotParts.leftForearm.rotation.x = Math.PI / 2;\r\n    robotParts.leftElbow.add(robotParts.leftForearm);\r\n    \r\n    robotParts.leftHand = new THREE.Mesh(\r\n      new THREE.BoxGeometry(0.15, 0.2, 0.05),\r\n      materials.body\r\n    );\r\n    robotParts.leftHand.position.y = -0.6;\r\n    robotParts.leftElbow.add(robotParts.leftHand);\r\n    \r\n    // Right arm\r\n    robotParts.rightShoulder = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.15, 32, 32),\r\n      materials.joint\r\n    );\r\n    robotParts.rightShoulder.position.set(0.6, 0.6, 0);\r\n    robotParts.torso.add(robotParts.rightShoulder);\r\n    \r\n    robotParts.rightUpperArm = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(0.08, 0.08, 0.5),\r\n      materials.limb\r\n    );\r\n    robotParts.rightUpperArm.position.y = -0.3;\r\n    robotParts.rightUpperArm.rotation.x = Math.PI / 2;\r\n    robotParts.rightShoulder.add(robotParts.rightUpperArm);\r\n    \r\n    robotParts.rightElbow = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.12, 32, 32),\r\n      materials.joint\r\n    );\r\n    robotParts.rightElbow.position.y = -0.6;\r\n    robotParts.rightShoulder.add(robotParts.rightElbow);\r\n    \r\n    robotParts.rightForearm = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(0.07, 0.07, 0.5),\r\n      materials.limb\r\n    );\r\n    robotParts.rightForearm.position.y = -0.3;\r\n    robotParts.rightForearm.rotation.x = Math.PI / 2;\r\n    robotParts.rightElbow.add(robotParts.rightForearm);\r\n    \r\n    robotParts.rightHand = new THREE.Mesh(\r\n      new THREE.BoxGeometry(0.15, 0.2, 0.05),\r\n      materials.body\r\n    );\r\n    robotParts.rightHand.position.y = -0.6;\r\n    robotParts.rightElbow.add(robotParts.rightHand);\r\n    \r\n    // Legs\r\n    // Left leg\r\n    robotParts.leftHip = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.15, 32, 32),\r\n      materials.joint\r\n    );\r\n    robotParts.leftHip.position.set(-0.3, -0.8, 0);\r\n    robotParts.torso.add(robotParts.leftHip);\r\n    \r\n    robotParts.leftThigh = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(0.1, 0.1, 0.6),\r\n      materials.limb\r\n    );\r\n    robotParts.leftThigh.position.y = -0.4;\r\n    robotParts.leftHip.add(robotParts.leftThigh);\r\n    \r\n    robotParts.leftKnee = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.12, 32, 32),\r\n      materials.joint\r\n    );\r\n    robotParts.leftKnee.position.y = -0.8;\r\n    robotParts.leftHip.add(robotParts.leftKnee);\r\n    \r\n    robotParts.leftShin = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(0.08, 0.08, 0.6),\r\n      materials.limb\r\n    );\r\n    robotParts.leftShin.position.y = -0.4;\r\n    robotParts.leftKnee.add(robotParts.leftShin);\r\n    \r\n    robotParts.leftFoot = new THREE.Mesh(\r\n      new THREE.BoxGeometry(0.2, 0.1, 0.3),\r\n      materials.body\r\n    );\r\n    robotParts.leftFoot.position.y = -0.8;\r\n    robotParts.leftFoot.position.z = 0.1;\r\n    robotParts.leftKnee.add(robotParts.leftFoot);\r\n    \r\n    // Right leg\r\n    robotParts.rightHip = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.15, 32, 32),\r\n      materials.joint\r\n    );\r\n    robotParts.rightHip.position.set(0.3, -0.8, 0);\r\n    robotParts.torso.add(robotParts.rightHip);\r\n    \r\n    robotParts.rightThigh = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(0.1, 0.1, 0.6),\r\n      materials.limb\r\n    );\r\n    robotParts.rightThigh.position.y = -0.4;\r\n    robotParts.rightHip.add(robotParts.rightThigh);\r\n    \r\n    robotParts.rightKnee = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.12, 32, 32),\r\n      materials.joint\r\n    );\r\n    robotParts.rightKnee.position.y = -0.8;\r\n    robotParts.rightHip.add(robotParts.rightKnee);\r\n    \r\n    robotParts.rightShin = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(0.08, 0.08, 0.6),\r\n      materials.limb\r\n    );\r\n    robotParts.rightShin.position.y = -0.4;\r\n    robotParts.rightKnee.add(robotParts.rightShin);\r\n    \r\n    robotParts.rightFoot = new THREE.Mesh(\r\n      new THREE.BoxGeometry(0.2, 0.1, 0.3),\r\n      materials.body\r\n    );\r\n    robotParts.rightFoot.position.y = -0.8;\r\n    robotParts.rightFoot.position.z = 0.1;\r\n    robotParts.rightKnee.add(robotParts.rightFoot);\r\n    \r\n    // Update robot based on servo positions\r\n    const updateRobotPose = () => {\r\n      if (!servoPositions) return;\r\n      \r\n      // Convert servo values (0-180) to radians (-PI/2 to PI/2)\r\n      const convertToRad = (value) => {\r\n        return ((value - 90) / 180) * Math.PI;\r\n      };\r\n      \r\n      // Head\r\n      if (servoPositions.Head_Pan) {\r\n        robotParts.head.rotation.y = convertToRad(servoPositions.Head_Pan);\r\n      }\r\n      if (servoPositions.Head_Tilt) {\r\n        robotParts.head.rotation.x = convertToRad(servoPositions.Head_Tilt);\r\n      }\r\n      \r\n      // Left arm\r\n      if (servoPositions.Left_Shoulder) {\r\n        robotParts.leftShoulder.rotation.x = convertToRad(servoPositions.Left_Shoulder);\r\n      }\r\n      if (servoPositions.Left_Elbow) {\r\n        robotParts.leftElbow.rotation.x = convertToRad(servoPositions.Left_Elbow);\r\n      }\r\n      \r\n      // Right arm\r\n      if (servoPositions.Right_Shoulder) {\r\n        robotParts.rightShoulder.rotation.x = convertToRad(servoPositions.Right_Shoulder);\r\n      }\r\n      if (servoPositions.Right_Elbow) {\r\n        robotParts.rightElbow.rotation.x = convertToRad(servoPositions.Right_Elbow);\r\n      }\r\n      \r\n      // Waist and torso\r\n      if (servoPositions.Waist) {\r\n        robotParts.torso.rotation.y = convertToRad(servoPositions.Waist);\r\n      }\r\n      if (servoPositions.Torso) {\r\n        robotParts.torso.rotation.x = convertToRad(servoPositions.Torso) / 2; // Reduced range\r\n      }\r\n      \r\n      // Left leg\r\n      if (servoPositions.Left_Hip) {\r\n        robotParts.leftHip.rotation.x = convertToRad(servoPositions.Left_Hip);\r\n      }\r\n      if (servoPositions.Left_Knee) {\r\n        robotParts.leftKnee.rotation.x = convertToRad(servoPositions.Left_Knee);\r\n      }\r\n      if (servoPositions.Left_Ankle) {\r\n        robotParts.leftFoot.rotation.x = convertToRad(servoPositions.Left_Ankle);\r\n      }\r\n      \r\n      // Right leg\r\n      if (servoPositions.Right_Hip) {\r\n        robotParts.rightHip.rotation.x = convertToRad(servoPositions.Right_Hip);\r\n      }\r\n      if (servoPositions.Right_Knee) {\r\n        robotParts.rightKnee.rotation.x = convertToRad(servoPositions.Right_Knee);\r\n      }\r\n      if (servoPositions.Right_Ankle) {\r\n        robotParts.rightFoot.rotation.x = convertToRad(servoPositions.Right_Ankle);\r\n      }\r\n      \r\n      // Hand servos (simplified visualization)\r\n      if (servoPositions.Left_Wrist) {\r\n        robotParts.leftHand.rotation.z = convertToRad(servoPositions.Left_Wrist);\r\n      }\r\n      if (servoPositions.Right_Wrist) {\r\n        robotParts.rightHand.rotation.z = convertToRad(servoPositions.Right_Wrist);\r\n      }\r\n    };\r\n    \r\n    // Initial update\r\n    updateRobotPose();\r\n    \r\n    // Animation loop\r\n    let frameId;\r\n    const animate = () => {\r\n      frameId = requestAnimationFrame(animate);\r\n      \r\n      // Rotate the scene slightly for better viewing\r\n      scene.rotation.y = Math.sin(Date.now() * 0.001) * 0.1;\r\n      \r\n      renderer.render(scene, camera);\r\n    };\r\n    \r\n    animate();\r\n    \r\n    // Handle window resize\r\n    const handleResize = () => {\r\n      camera.aspect = mountRef.current.clientWidth / mountRef.current.clientHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\r\n    };\r\n    \r\n    window.addEventListener('resize', handleResize);\r\n    \r\n    // Update robot when servo positions change\r\n    const watchServoChanges = () => {\r\n      updateRobotPose();\r\n    };\r\n    \r\n    // Watch for servo position changes\r\n    const watchInterval = setInterval(watchServoChanges, 100);\r\n    \r\n    // Cleanup\r\n    return () => {\r\n      clearInterval(watchInterval);\r\n      window.removeEventListener('resize', handleResize);\r\n      cancelAnimationFrame(frameId);\r\n      if (mountRef.current) {\r\n        mountRef.current.removeChild(renderer.domElement);\r\n      }\r\n    };\r\n  }, [servoPositions]);\r\n  \r\n  return <div ref={mountRef} style={{ width: '100%', height: '300px' }} />;\r\n};\r\n\r\nexport default RobotVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}