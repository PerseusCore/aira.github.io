{"ast":null,"code":"import React,{useEffect,useRef}from'react';import*as THREE from'three';import{jsx as _jsx}from\"react/jsx-runtime\";const RobotVisualization=_ref=>{let{servoPositions}=_ref;const mountRef=useRef(null);useEffect(()=>{// Scene setup\nconst scene=new THREE.Scene();scene.background=new THREE.Color(0xf0f0f0);// Camera setup\nconst camera=new THREE.PerspectiveCamera(75,mountRef.current.clientWidth/mountRef.current.clientHeight,0.1,1000);camera.position.z=5;camera.position.y=1;// Renderer setup\nconst renderer=new THREE.WebGLRenderer({antialias:true});renderer.setSize(mountRef.current.clientWidth,mountRef.current.clientHeight);mountRef.current.appendChild(renderer.domElement);// Lighting\nconst ambientLight=new THREE.AmbientLight(0xffffff,0.5);scene.add(ambientLight);const directionalLight=new THREE.DirectionalLight(0xffffff,0.8);directionalLight.position.set(1,1,1);scene.add(directionalLight);// Robot parts\nconst robotParts={};const materials={body:new THREE.MeshPhongMaterial({color:0x6f42c1}),joint:new THREE.MeshPhongMaterial({color:0x444444}),limb:new THREE.MeshPhongMaterial({color:0x888888})};// Create robot body\nrobotParts.torso=new THREE.Mesh(new THREE.BoxGeometry(1,1.5,0.5),materials.body);scene.add(robotParts.torso);// Head\nrobotParts.head=new THREE.Mesh(new THREE.SphereGeometry(0.3,32,32),materials.body);robotParts.head.position.y=1.1;robotParts.torso.add(robotParts.head);// Arms\n// Left arm\nrobotParts.leftShoulder=new THREE.Mesh(new THREE.SphereGeometry(0.15,32,32),materials.joint);robotParts.leftShoulder.position.set(-0.6,0.6,0);robotParts.torso.add(robotParts.leftShoulder);robotParts.leftUpperArm=new THREE.Mesh(new THREE.CylinderGeometry(0.08,0.08,0.5),materials.limb);robotParts.leftUpperArm.position.y=-0.3;robotParts.leftUpperArm.rotation.x=Math.PI/2;robotParts.leftShoulder.add(robotParts.leftUpperArm);robotParts.leftElbow=new THREE.Mesh(new THREE.SphereGeometry(0.12,32,32),materials.joint);robotParts.leftElbow.position.y=-0.6;robotParts.leftShoulder.add(robotParts.leftElbow);robotParts.leftForearm=new THREE.Mesh(new THREE.CylinderGeometry(0.07,0.07,0.5),materials.limb);robotParts.leftForearm.position.y=-0.3;robotParts.leftForearm.rotation.x=Math.PI/2;robotParts.leftElbow.add(robotParts.leftForearm);robotParts.leftHand=new THREE.Mesh(new THREE.BoxGeometry(0.15,0.2,0.05),materials.body);robotParts.leftHand.position.y=-0.6;robotParts.leftElbow.add(robotParts.leftHand);// Right arm\nrobotParts.rightShoulder=new THREE.Mesh(new THREE.SphereGeometry(0.15,32,32),materials.joint);robotParts.rightShoulder.position.set(0.6,0.6,0);robotParts.torso.add(robotParts.rightShoulder);robotParts.rightUpperArm=new THREE.Mesh(new THREE.CylinderGeometry(0.08,0.08,0.5),materials.limb);robotParts.rightUpperArm.position.y=-0.3;robotParts.rightUpperArm.rotation.x=Math.PI/2;robotParts.rightShoulder.add(robotParts.rightUpperArm);robotParts.rightElbow=new THREE.Mesh(new THREE.SphereGeometry(0.12,32,32),materials.joint);robotParts.rightElbow.position.y=-0.6;robotParts.rightShoulder.add(robotParts.rightElbow);robotParts.rightForearm=new THREE.Mesh(new THREE.CylinderGeometry(0.07,0.07,0.5),materials.limb);robotParts.rightForearm.position.y=-0.3;robotParts.rightForearm.rotation.x=Math.PI/2;robotParts.rightElbow.add(robotParts.rightForearm);robotParts.rightHand=new THREE.Mesh(new THREE.BoxGeometry(0.15,0.2,0.05),materials.body);robotParts.rightHand.position.y=-0.6;robotParts.rightElbow.add(robotParts.rightHand);// Legs\n// Left leg\nrobotParts.leftHip=new THREE.Mesh(new THREE.SphereGeometry(0.15,32,32),materials.joint);robotParts.leftHip.position.set(-0.3,-0.8,0);robotParts.torso.add(robotParts.leftHip);robotParts.leftThigh=new THREE.Mesh(new THREE.CylinderGeometry(0.1,0.1,0.6),materials.limb);robotParts.leftThigh.position.y=-0.4;robotParts.leftHip.add(robotParts.leftThigh);robotParts.leftKnee=new THREE.Mesh(new THREE.SphereGeometry(0.12,32,32),materials.joint);robotParts.leftKnee.position.y=-0.8;robotParts.leftHip.add(robotParts.leftKnee);robotParts.leftShin=new THREE.Mesh(new THREE.CylinderGeometry(0.08,0.08,0.6),materials.limb);robotParts.leftShin.position.y=-0.4;robotParts.leftKnee.add(robotParts.leftShin);robotParts.leftFoot=new THREE.Mesh(new THREE.BoxGeometry(0.2,0.1,0.3),materials.body);robotParts.leftFoot.position.y=-0.8;robotParts.leftFoot.position.z=0.1;robotParts.leftKnee.add(robotParts.leftFoot);// Right leg\nrobotParts.rightHip=new THREE.Mesh(new THREE.SphereGeometry(0.15,32,32),materials.joint);robotParts.rightHip.position.set(0.3,-0.8,0);robotParts.torso.add(robotParts.rightHip);robotParts.rightThigh=new THREE.Mesh(new THREE.CylinderGeometry(0.1,0.1,0.6),materials.limb);robotParts.rightThigh.position.y=-0.4;robotParts.rightHip.add(robotParts.rightThigh);robotParts.rightKnee=new THREE.Mesh(new THREE.SphereGeometry(0.12,32,32),materials.joint);robotParts.rightKnee.position.y=-0.8;robotParts.rightHip.add(robotParts.rightKnee);robotParts.rightShin=new THREE.Mesh(new THREE.CylinderGeometry(0.08,0.08,0.6),materials.limb);robotParts.rightShin.position.y=-0.4;robotParts.rightKnee.add(robotParts.rightShin);robotParts.rightFoot=new THREE.Mesh(new THREE.BoxGeometry(0.2,0.1,0.3),materials.body);robotParts.rightFoot.position.y=-0.8;robotParts.rightFoot.position.z=0.1;robotParts.rightKnee.add(robotParts.rightFoot);// Update robot based on servo positions\nconst updateRobotPose=()=>{if(!servoPositions)return;// Convert servo values (0-180) to radians (-PI/2 to PI/2)\nconst convertToRad=value=>{return(value-90)/180*Math.PI;};// Head\nif(servoPositions.Head_Pan){robotParts.head.rotation.y=convertToRad(servoPositions.Head_Pan);}if(servoPositions.Head_Tilt){robotParts.head.rotation.x=convertToRad(servoPositions.Head_Tilt);}// Left arm\nif(servoPositions.Left_Shoulder){robotParts.leftShoulder.rotation.x=convertToRad(servoPositions.Left_Shoulder);}if(servoPositions.Left_Elbow){robotParts.leftElbow.rotation.x=convertToRad(servoPositions.Left_Elbow);}// Right arm\nif(servoPositions.Right_Shoulder){robotParts.rightShoulder.rotation.x=convertToRad(servoPositions.Right_Shoulder);}if(servoPositions.Right_Elbow){robotParts.rightElbow.rotation.x=convertToRad(servoPositions.Right_Elbow);}// Waist and torso\nif(servoPositions.Waist){robotParts.torso.rotation.y=convertToRad(servoPositions.Waist);}if(servoPositions.Torso){robotParts.torso.rotation.x=convertToRad(servoPositions.Torso)/2;// Reduced range\n}// Left leg\nif(servoPositions.Left_Hip){robotParts.leftHip.rotation.x=convertToRad(servoPositions.Left_Hip);}if(servoPositions.Left_Knee){robotParts.leftKnee.rotation.x=convertToRad(servoPositions.Left_Knee);}if(servoPositions.Left_Ankle){robotParts.leftFoot.rotation.x=convertToRad(servoPositions.Left_Ankle);}// Right leg\nif(servoPositions.Right_Hip){robotParts.rightHip.rotation.x=convertToRad(servoPositions.Right_Hip);}if(servoPositions.Right_Knee){robotParts.rightKnee.rotation.x=convertToRad(servoPositions.Right_Knee);}if(servoPositions.Right_Ankle){robotParts.rightFoot.rotation.x=convertToRad(servoPositions.Right_Ankle);}// Hand servos (simplified visualization)\nif(servoPositions.Left_Wrist){robotParts.leftHand.rotation.z=convertToRad(servoPositions.Left_Wrist);}if(servoPositions.Right_Wrist){robotParts.rightHand.rotation.z=convertToRad(servoPositions.Right_Wrist);}};// Initial update\nupdateRobotPose();// Animation loop\nlet frameId;const animate=()=>{frameId=requestAnimationFrame(animate);// Rotate the scene slightly for better viewing\nscene.rotation.y=Math.sin(Date.now()*0.001)*0.1;renderer.render(scene,camera);};animate();// Handle window resize\nconst handleResize=()=>{camera.aspect=mountRef.current.clientWidth/mountRef.current.clientHeight;camera.updateProjectionMatrix();renderer.setSize(mountRef.current.clientWidth,mountRef.current.clientHeight);};window.addEventListener('resize',handleResize);// Update robot when servo positions change\nconst watchServoChanges=()=>{updateRobotPose();};// Watch for servo position changes\nconst watchInterval=setInterval(watchServoChanges,100);// Cleanup\nreturn()=>{clearInterval(watchInterval);window.removeEventListener('resize',handleResize);cancelAnimationFrame(frameId);if(mountRef.current){mountRef.current.removeChild(renderer.domElement);}};},[servoPositions]);return/*#__PURE__*/_jsx(\"div\",{ref:mountRef,style:{width:'100%',height:'300px'}});};export default RobotVisualization;","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsx","_jsx","RobotVisualization","_ref","servoPositions","mountRef","scene","Scene","background","Color","camera","PerspectiveCamera","current","clientWidth","clientHeight","position","z","y","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","set","robotParts","materials","body","MeshPhongMaterial","color","joint","limb","torso","Mesh","BoxGeometry","head","SphereGeometry","leftShoulder","leftUpperArm","CylinderGeometry","rotation","x","Math","PI","leftElbow","leftForearm","leftHand","rightShoulder","rightUpperArm","rightElbow","rightForearm","rightHand","leftHip","leftThigh","leftKnee","leftShin","leftFoot","rightHip","rightThigh","rightKnee","rightShin","rightFoot","updateRobotPose","convertToRad","value","Head_Pan","Head_Tilt","Left_Shoulder","Left_Elbow","Right_Shoulder","Right_Elbow","Waist","Torso","Left_Hip","Left_Knee","Left_Ankle","Right_Hip","Right_Knee","Right_Ankle","Left_Wrist","Right_Wrist","frameId","animate","requestAnimationFrame","sin","Date","now","render","handleResize","aspect","updateProjectionMatrix","window","addEventListener","watchServoChanges","watchInterval","setInterval","clearInterval","removeEventListener","cancelAnimationFrame","removeChild","ref","style","width","height"],"sources":["C:/Users/Perseus/Desktop/aira_website/src/components/RobotVisualization.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nconst RobotVisualization = ({ servoPositions }) => {\r\n  const mountRef = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    // Scene setup\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0xf0f0f0);\r\n    \r\n    // Camera setup\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75, \r\n      mountRef.current.clientWidth / mountRef.current.clientHeight, \r\n      0.1, \r\n      1000\r\n    );\r\n    camera.position.z = 5;\r\n    camera.position.y = 1;\r\n    \r\n    // Renderer setup\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\r\n    mountRef.current.appendChild(renderer.domElement);\r\n    \r\n    // Lighting\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n    scene.add(ambientLight);\r\n    \r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n    directionalLight.position.set(1, 1, 1);\r\n    scene.add(directionalLight);\r\n    \r\n    // Robot parts\r\n    const robotParts = {};\r\n    const materials = {\r\n      body: new THREE.MeshPhongMaterial({ color: 0x6f42c1 }),\r\n      joint: new THREE.MeshPhongMaterial({ color: 0x444444 }),\r\n      limb: new THREE.MeshPhongMaterial({ color: 0x888888 })\r\n    };\r\n    \r\n    // Create robot body\r\n    robotParts.torso = new THREE.Mesh(\r\n      new THREE.BoxGeometry(1, 1.5, 0.5),\r\n      materials.body\r\n    );\r\n    scene.add(robotParts.torso);\r\n    \r\n    // Head\r\n    robotParts.head = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.3, 32, 32),\r\n      materials.body\r\n    );\r\n    robotParts.head.position.y = 1.1;\r\n    robotParts.torso.add(robotParts.head);\r\n    \r\n    // Arms\r\n    // Left arm\r\n    robotParts.leftShoulder = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.15, 32, 32),\r\n      materials.joint\r\n    );\r\n    robotParts.leftShoulder.position.set(-0.6, 0.6, 0);\r\n    robotParts.torso.add(robotParts.leftShoulder);\r\n    \r\n    robotParts.leftUpperArm = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(0.08, 0.08, 0.5),\r\n      materials.limb\r\n    );\r\n    robotParts.leftUpperArm.position.y = -0.3;\r\n    robotParts.leftUpperArm.rotation.x = Math.PI / 2;\r\n    robotParts.leftShoulder.add(robotParts.leftUpperArm);\r\n    \r\n    robotParts.leftElbow = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.12, 32, 32),\r\n      materials.joint\r\n    );\r\n    robotParts.leftElbow.position.y = -0.6;\r\n    robotParts.leftShoulder.add(robotParts.leftElbow);\r\n    \r\n    robotParts.leftForearm = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(0.07, 0.07, 0.5),\r\n      materials.limb\r\n    );\r\n    robotParts.leftForearm.position.y = -0.3;\r\n    robotParts.leftForearm.rotation.x = Math.PI / 2;\r\n    robotParts.leftElbow.add(robotParts.leftForearm);\r\n    \r\n    robotParts.leftHand = new THREE.Mesh(\r\n      new THREE.BoxGeometry(0.15, 0.2, 0.05),\r\n      materials.body\r\n    );\r\n    robotParts.leftHand.position.y = -0.6;\r\n    robotParts.leftElbow.add(robotParts.leftHand);\r\n    \r\n    // Right arm\r\n    robotParts.rightShoulder = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.15, 32, 32),\r\n      materials.joint\r\n    );\r\n    robotParts.rightShoulder.position.set(0.6, 0.6, 0);\r\n    robotParts.torso.add(robotParts.rightShoulder);\r\n    \r\n    robotParts.rightUpperArm = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(0.08, 0.08, 0.5),\r\n      materials.limb\r\n    );\r\n    robotParts.rightUpperArm.position.y = -0.3;\r\n    robotParts.rightUpperArm.rotation.x = Math.PI / 2;\r\n    robotParts.rightShoulder.add(robotParts.rightUpperArm);\r\n    \r\n    robotParts.rightElbow = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.12, 32, 32),\r\n      materials.joint\r\n    );\r\n    robotParts.rightElbow.position.y = -0.6;\r\n    robotParts.rightShoulder.add(robotParts.rightElbow);\r\n    \r\n    robotParts.rightForearm = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(0.07, 0.07, 0.5),\r\n      materials.limb\r\n    );\r\n    robotParts.rightForearm.position.y = -0.3;\r\n    robotParts.rightForearm.rotation.x = Math.PI / 2;\r\n    robotParts.rightElbow.add(robotParts.rightForearm);\r\n    \r\n    robotParts.rightHand = new THREE.Mesh(\r\n      new THREE.BoxGeometry(0.15, 0.2, 0.05),\r\n      materials.body\r\n    );\r\n    robotParts.rightHand.position.y = -0.6;\r\n    robotParts.rightElbow.add(robotParts.rightHand);\r\n    \r\n    // Legs\r\n    // Left leg\r\n    robotParts.leftHip = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.15, 32, 32),\r\n      materials.joint\r\n    );\r\n    robotParts.leftHip.position.set(-0.3, -0.8, 0);\r\n    robotParts.torso.add(robotParts.leftHip);\r\n    \r\n    robotParts.leftThigh = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(0.1, 0.1, 0.6),\r\n      materials.limb\r\n    );\r\n    robotParts.leftThigh.position.y = -0.4;\r\n    robotParts.leftHip.add(robotParts.leftThigh);\r\n    \r\n    robotParts.leftKnee = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.12, 32, 32),\r\n      materials.joint\r\n    );\r\n    robotParts.leftKnee.position.y = -0.8;\r\n    robotParts.leftHip.add(robotParts.leftKnee);\r\n    \r\n    robotParts.leftShin = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(0.08, 0.08, 0.6),\r\n      materials.limb\r\n    );\r\n    robotParts.leftShin.position.y = -0.4;\r\n    robotParts.leftKnee.add(robotParts.leftShin);\r\n    \r\n    robotParts.leftFoot = new THREE.Mesh(\r\n      new THREE.BoxGeometry(0.2, 0.1, 0.3),\r\n      materials.body\r\n    );\r\n    robotParts.leftFoot.position.y = -0.8;\r\n    robotParts.leftFoot.position.z = 0.1;\r\n    robotParts.leftKnee.add(robotParts.leftFoot);\r\n    \r\n    // Right leg\r\n    robotParts.rightHip = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.15, 32, 32),\r\n      materials.joint\r\n    );\r\n    robotParts.rightHip.position.set(0.3, -0.8, 0);\r\n    robotParts.torso.add(robotParts.rightHip);\r\n    \r\n    robotParts.rightThigh = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(0.1, 0.1, 0.6),\r\n      materials.limb\r\n    );\r\n    robotParts.rightThigh.position.y = -0.4;\r\n    robotParts.rightHip.add(robotParts.rightThigh);\r\n    \r\n    robotParts.rightKnee = new THREE.Mesh(\r\n      new THREE.SphereGeometry(0.12, 32, 32),\r\n      materials.joint\r\n    );\r\n    robotParts.rightKnee.position.y = -0.8;\r\n    robotParts.rightHip.add(robotParts.rightKnee);\r\n    \r\n    robotParts.rightShin = new THREE.Mesh(\r\n      new THREE.CylinderGeometry(0.08, 0.08, 0.6),\r\n      materials.limb\r\n    );\r\n    robotParts.rightShin.position.y = -0.4;\r\n    robotParts.rightKnee.add(robotParts.rightShin);\r\n    \r\n    robotParts.rightFoot = new THREE.Mesh(\r\n      new THREE.BoxGeometry(0.2, 0.1, 0.3),\r\n      materials.body\r\n    );\r\n    robotParts.rightFoot.position.y = -0.8;\r\n    robotParts.rightFoot.position.z = 0.1;\r\n    robotParts.rightKnee.add(robotParts.rightFoot);\r\n    \r\n    // Update robot based on servo positions\r\n    const updateRobotPose = () => {\r\n      if (!servoPositions) return;\r\n      \r\n      // Convert servo values (0-180) to radians (-PI/2 to PI/2)\r\n      const convertToRad = (value) => {\r\n        return ((value - 90) / 180) * Math.PI;\r\n      };\r\n      \r\n      // Head\r\n      if (servoPositions.Head_Pan) {\r\n        robotParts.head.rotation.y = convertToRad(servoPositions.Head_Pan);\r\n      }\r\n      if (servoPositions.Head_Tilt) {\r\n        robotParts.head.rotation.x = convertToRad(servoPositions.Head_Tilt);\r\n      }\r\n      \r\n      // Left arm\r\n      if (servoPositions.Left_Shoulder) {\r\n        robotParts.leftShoulder.rotation.x = convertToRad(servoPositions.Left_Shoulder);\r\n      }\r\n      if (servoPositions.Left_Elbow) {\r\n        robotParts.leftElbow.rotation.x = convertToRad(servoPositions.Left_Elbow);\r\n      }\r\n      \r\n      // Right arm\r\n      if (servoPositions.Right_Shoulder) {\r\n        robotParts.rightShoulder.rotation.x = convertToRad(servoPositions.Right_Shoulder);\r\n      }\r\n      if (servoPositions.Right_Elbow) {\r\n        robotParts.rightElbow.rotation.x = convertToRad(servoPositions.Right_Elbow);\r\n      }\r\n      \r\n      // Waist and torso\r\n      if (servoPositions.Waist) {\r\n        robotParts.torso.rotation.y = convertToRad(servoPositions.Waist);\r\n      }\r\n      if (servoPositions.Torso) {\r\n        robotParts.torso.rotation.x = convertToRad(servoPositions.Torso) / 2; // Reduced range\r\n      }\r\n      \r\n      // Left leg\r\n      if (servoPositions.Left_Hip) {\r\n        robotParts.leftHip.rotation.x = convertToRad(servoPositions.Left_Hip);\r\n      }\r\n      if (servoPositions.Left_Knee) {\r\n        robotParts.leftKnee.rotation.x = convertToRad(servoPositions.Left_Knee);\r\n      }\r\n      if (servoPositions.Left_Ankle) {\r\n        robotParts.leftFoot.rotation.x = convertToRad(servoPositions.Left_Ankle);\r\n      }\r\n      \r\n      // Right leg\r\n      if (servoPositions.Right_Hip) {\r\n        robotParts.rightHip.rotation.x = convertToRad(servoPositions.Right_Hip);\r\n      }\r\n      if (servoPositions.Right_Knee) {\r\n        robotParts.rightKnee.rotation.x = convertToRad(servoPositions.Right_Knee);\r\n      }\r\n      if (servoPositions.Right_Ankle) {\r\n        robotParts.rightFoot.rotation.x = convertToRad(servoPositions.Right_Ankle);\r\n      }\r\n      \r\n      // Hand servos (simplified visualization)\r\n      if (servoPositions.Left_Wrist) {\r\n        robotParts.leftHand.rotation.z = convertToRad(servoPositions.Left_Wrist);\r\n      }\r\n      if (servoPositions.Right_Wrist) {\r\n        robotParts.rightHand.rotation.z = convertToRad(servoPositions.Right_Wrist);\r\n      }\r\n    };\r\n    \r\n    // Initial update\r\n    updateRobotPose();\r\n    \r\n    // Animation loop\r\n    let frameId;\r\n    const animate = () => {\r\n      frameId = requestAnimationFrame(animate);\r\n      \r\n      // Rotate the scene slightly for better viewing\r\n      scene.rotation.y = Math.sin(Date.now() * 0.001) * 0.1;\r\n      \r\n      renderer.render(scene, camera);\r\n    };\r\n    \r\n    animate();\r\n    \r\n    // Handle window resize\r\n    const handleResize = () => {\r\n      camera.aspect = mountRef.current.clientWidth / mountRef.current.clientHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\r\n    };\r\n    \r\n    window.addEventListener('resize', handleResize);\r\n    \r\n    // Update robot when servo positions change\r\n    const watchServoChanges = () => {\r\n      updateRobotPose();\r\n    };\r\n    \r\n    // Watch for servo position changes\r\n    const watchInterval = setInterval(watchServoChanges, 100);\r\n    \r\n    // Cleanup\r\n    return () => {\r\n      clearInterval(watchInterval);\r\n      window.removeEventListener('resize', handleResize);\r\n      cancelAnimationFrame(frameId);\r\n      if (mountRef.current) {\r\n        mountRef.current.removeChild(renderer.domElement);\r\n      }\r\n    };\r\n  }, [servoPositions]);\r\n  \r\n  return <div ref={mountRef} style={{ width: '100%', height: '300px' }} />;\r\n};\r\n\r\nexport default RobotVisualization;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAChD,MAAO,GAAK,CAAAC,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE/B,KAAM,CAAAC,kBAAkB,CAAGC,IAAA,EAAwB,IAAvB,CAAEC,cAAe,CAAC,CAAAD,IAAA,CAC5C,KAAM,CAAAE,QAAQ,CAAGP,MAAM,CAAC,IAAI,CAAC,CAE7BD,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAS,KAAK,CAAG,GAAI,CAAAP,KAAK,CAACQ,KAAK,CAAC,CAAC,CAC/BD,KAAK,CAACE,UAAU,CAAG,GAAI,CAAAT,KAAK,CAACU,KAAK,CAAC,QAAQ,CAAC,CAE5C;AACA,KAAM,CAAAC,MAAM,CAAG,GAAI,CAAAX,KAAK,CAACY,iBAAiB,CACxC,EAAE,CACFN,QAAQ,CAACO,OAAO,CAACC,WAAW,CAAGR,QAAQ,CAACO,OAAO,CAACE,YAAY,CAC5D,GAAG,CACH,IACF,CAAC,CACDJ,MAAM,CAACK,QAAQ,CAACC,CAAC,CAAG,CAAC,CACrBN,MAAM,CAACK,QAAQ,CAACE,CAAC,CAAG,CAAC,CAErB;AACA,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAnB,KAAK,CAACoB,aAAa,CAAC,CAAEC,SAAS,CAAE,IAAK,CAAC,CAAC,CAC7DF,QAAQ,CAACG,OAAO,CAAChB,QAAQ,CAACO,OAAO,CAACC,WAAW,CAAER,QAAQ,CAACO,OAAO,CAACE,YAAY,CAAC,CAC7ET,QAAQ,CAACO,OAAO,CAACU,WAAW,CAACJ,QAAQ,CAACK,UAAU,CAAC,CAEjD;AACA,KAAM,CAAAC,YAAY,CAAG,GAAI,CAAAzB,KAAK,CAAC0B,YAAY,CAAC,QAAQ,CAAE,GAAG,CAAC,CAC1DnB,KAAK,CAACoB,GAAG,CAACF,YAAY,CAAC,CAEvB,KAAM,CAAAG,gBAAgB,CAAG,GAAI,CAAA5B,KAAK,CAAC6B,gBAAgB,CAAC,QAAQ,CAAE,GAAG,CAAC,CAClED,gBAAgB,CAACZ,QAAQ,CAACc,GAAG,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CACtCvB,KAAK,CAACoB,GAAG,CAACC,gBAAgB,CAAC,CAE3B;AACA,KAAM,CAAAG,UAAU,CAAG,CAAC,CAAC,CACrB,KAAM,CAAAC,SAAS,CAAG,CAChBC,IAAI,CAAE,GAAI,CAAAjC,KAAK,CAACkC,iBAAiB,CAAC,CAAEC,KAAK,CAAE,QAAS,CAAC,CAAC,CACtDC,KAAK,CAAE,GAAI,CAAApC,KAAK,CAACkC,iBAAiB,CAAC,CAAEC,KAAK,CAAE,QAAS,CAAC,CAAC,CACvDE,IAAI,CAAE,GAAI,CAAArC,KAAK,CAACkC,iBAAiB,CAAC,CAAEC,KAAK,CAAE,QAAS,CAAC,CACvD,CAAC,CAED;AACAJ,UAAU,CAACO,KAAK,CAAG,GAAI,CAAAtC,KAAK,CAACuC,IAAI,CAC/B,GAAI,CAAAvC,KAAK,CAACwC,WAAW,CAAC,CAAC,CAAE,GAAG,CAAE,GAAG,CAAC,CAClCR,SAAS,CAACC,IACZ,CAAC,CACD1B,KAAK,CAACoB,GAAG,CAACI,UAAU,CAACO,KAAK,CAAC,CAE3B;AACAP,UAAU,CAACU,IAAI,CAAG,GAAI,CAAAzC,KAAK,CAACuC,IAAI,CAC9B,GAAI,CAAAvC,KAAK,CAAC0C,cAAc,CAAC,GAAG,CAAE,EAAE,CAAE,EAAE,CAAC,CACrCV,SAAS,CAACC,IACZ,CAAC,CACDF,UAAU,CAACU,IAAI,CAACzB,QAAQ,CAACE,CAAC,CAAG,GAAG,CAChCa,UAAU,CAACO,KAAK,CAACX,GAAG,CAACI,UAAU,CAACU,IAAI,CAAC,CAErC;AACA;AACAV,UAAU,CAACY,YAAY,CAAG,GAAI,CAAA3C,KAAK,CAACuC,IAAI,CACtC,GAAI,CAAAvC,KAAK,CAAC0C,cAAc,CAAC,IAAI,CAAE,EAAE,CAAE,EAAE,CAAC,CACtCV,SAAS,CAACI,KACZ,CAAC,CACDL,UAAU,CAACY,YAAY,CAAC3B,QAAQ,CAACc,GAAG,CAAC,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,CAClDC,UAAU,CAACO,KAAK,CAACX,GAAG,CAACI,UAAU,CAACY,YAAY,CAAC,CAE7CZ,UAAU,CAACa,YAAY,CAAG,GAAI,CAAA5C,KAAK,CAACuC,IAAI,CACtC,GAAI,CAAAvC,KAAK,CAAC6C,gBAAgB,CAAC,IAAI,CAAE,IAAI,CAAE,GAAG,CAAC,CAC3Cb,SAAS,CAACK,IACZ,CAAC,CACDN,UAAU,CAACa,YAAY,CAAC5B,QAAQ,CAACE,CAAC,CAAG,CAAC,GAAG,CACzCa,UAAU,CAACa,YAAY,CAACE,QAAQ,CAACC,CAAC,CAAGC,IAAI,CAACC,EAAE,CAAG,CAAC,CAChDlB,UAAU,CAACY,YAAY,CAAChB,GAAG,CAACI,UAAU,CAACa,YAAY,CAAC,CAEpDb,UAAU,CAACmB,SAAS,CAAG,GAAI,CAAAlD,KAAK,CAACuC,IAAI,CACnC,GAAI,CAAAvC,KAAK,CAAC0C,cAAc,CAAC,IAAI,CAAE,EAAE,CAAE,EAAE,CAAC,CACtCV,SAAS,CAACI,KACZ,CAAC,CACDL,UAAU,CAACmB,SAAS,CAAClC,QAAQ,CAACE,CAAC,CAAG,CAAC,GAAG,CACtCa,UAAU,CAACY,YAAY,CAAChB,GAAG,CAACI,UAAU,CAACmB,SAAS,CAAC,CAEjDnB,UAAU,CAACoB,WAAW,CAAG,GAAI,CAAAnD,KAAK,CAACuC,IAAI,CACrC,GAAI,CAAAvC,KAAK,CAAC6C,gBAAgB,CAAC,IAAI,CAAE,IAAI,CAAE,GAAG,CAAC,CAC3Cb,SAAS,CAACK,IACZ,CAAC,CACDN,UAAU,CAACoB,WAAW,CAACnC,QAAQ,CAACE,CAAC,CAAG,CAAC,GAAG,CACxCa,UAAU,CAACoB,WAAW,CAACL,QAAQ,CAACC,CAAC,CAAGC,IAAI,CAACC,EAAE,CAAG,CAAC,CAC/ClB,UAAU,CAACmB,SAAS,CAACvB,GAAG,CAACI,UAAU,CAACoB,WAAW,CAAC,CAEhDpB,UAAU,CAACqB,QAAQ,CAAG,GAAI,CAAApD,KAAK,CAACuC,IAAI,CAClC,GAAI,CAAAvC,KAAK,CAACwC,WAAW,CAAC,IAAI,CAAE,GAAG,CAAE,IAAI,CAAC,CACtCR,SAAS,CAACC,IACZ,CAAC,CACDF,UAAU,CAACqB,QAAQ,CAACpC,QAAQ,CAACE,CAAC,CAAG,CAAC,GAAG,CACrCa,UAAU,CAACmB,SAAS,CAACvB,GAAG,CAACI,UAAU,CAACqB,QAAQ,CAAC,CAE7C;AACArB,UAAU,CAACsB,aAAa,CAAG,GAAI,CAAArD,KAAK,CAACuC,IAAI,CACvC,GAAI,CAAAvC,KAAK,CAAC0C,cAAc,CAAC,IAAI,CAAE,EAAE,CAAE,EAAE,CAAC,CACtCV,SAAS,CAACI,KACZ,CAAC,CACDL,UAAU,CAACsB,aAAa,CAACrC,QAAQ,CAACc,GAAG,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,CAClDC,UAAU,CAACO,KAAK,CAACX,GAAG,CAACI,UAAU,CAACsB,aAAa,CAAC,CAE9CtB,UAAU,CAACuB,aAAa,CAAG,GAAI,CAAAtD,KAAK,CAACuC,IAAI,CACvC,GAAI,CAAAvC,KAAK,CAAC6C,gBAAgB,CAAC,IAAI,CAAE,IAAI,CAAE,GAAG,CAAC,CAC3Cb,SAAS,CAACK,IACZ,CAAC,CACDN,UAAU,CAACuB,aAAa,CAACtC,QAAQ,CAACE,CAAC,CAAG,CAAC,GAAG,CAC1Ca,UAAU,CAACuB,aAAa,CAACR,QAAQ,CAACC,CAAC,CAAGC,IAAI,CAACC,EAAE,CAAG,CAAC,CACjDlB,UAAU,CAACsB,aAAa,CAAC1B,GAAG,CAACI,UAAU,CAACuB,aAAa,CAAC,CAEtDvB,UAAU,CAACwB,UAAU,CAAG,GAAI,CAAAvD,KAAK,CAACuC,IAAI,CACpC,GAAI,CAAAvC,KAAK,CAAC0C,cAAc,CAAC,IAAI,CAAE,EAAE,CAAE,EAAE,CAAC,CACtCV,SAAS,CAACI,KACZ,CAAC,CACDL,UAAU,CAACwB,UAAU,CAACvC,QAAQ,CAACE,CAAC,CAAG,CAAC,GAAG,CACvCa,UAAU,CAACsB,aAAa,CAAC1B,GAAG,CAACI,UAAU,CAACwB,UAAU,CAAC,CAEnDxB,UAAU,CAACyB,YAAY,CAAG,GAAI,CAAAxD,KAAK,CAACuC,IAAI,CACtC,GAAI,CAAAvC,KAAK,CAAC6C,gBAAgB,CAAC,IAAI,CAAE,IAAI,CAAE,GAAG,CAAC,CAC3Cb,SAAS,CAACK,IACZ,CAAC,CACDN,UAAU,CAACyB,YAAY,CAACxC,QAAQ,CAACE,CAAC,CAAG,CAAC,GAAG,CACzCa,UAAU,CAACyB,YAAY,CAACV,QAAQ,CAACC,CAAC,CAAGC,IAAI,CAACC,EAAE,CAAG,CAAC,CAChDlB,UAAU,CAACwB,UAAU,CAAC5B,GAAG,CAACI,UAAU,CAACyB,YAAY,CAAC,CAElDzB,UAAU,CAAC0B,SAAS,CAAG,GAAI,CAAAzD,KAAK,CAACuC,IAAI,CACnC,GAAI,CAAAvC,KAAK,CAACwC,WAAW,CAAC,IAAI,CAAE,GAAG,CAAE,IAAI,CAAC,CACtCR,SAAS,CAACC,IACZ,CAAC,CACDF,UAAU,CAAC0B,SAAS,CAACzC,QAAQ,CAACE,CAAC,CAAG,CAAC,GAAG,CACtCa,UAAU,CAACwB,UAAU,CAAC5B,GAAG,CAACI,UAAU,CAAC0B,SAAS,CAAC,CAE/C;AACA;AACA1B,UAAU,CAAC2B,OAAO,CAAG,GAAI,CAAA1D,KAAK,CAACuC,IAAI,CACjC,GAAI,CAAAvC,KAAK,CAAC0C,cAAc,CAAC,IAAI,CAAE,EAAE,CAAE,EAAE,CAAC,CACtCV,SAAS,CAACI,KACZ,CAAC,CACDL,UAAU,CAAC2B,OAAO,CAAC1C,QAAQ,CAACc,GAAG,CAAC,CAAC,GAAG,CAAE,CAAC,GAAG,CAAE,CAAC,CAAC,CAC9CC,UAAU,CAACO,KAAK,CAACX,GAAG,CAACI,UAAU,CAAC2B,OAAO,CAAC,CAExC3B,UAAU,CAAC4B,SAAS,CAAG,GAAI,CAAA3D,KAAK,CAACuC,IAAI,CACnC,GAAI,CAAAvC,KAAK,CAAC6C,gBAAgB,CAAC,GAAG,CAAE,GAAG,CAAE,GAAG,CAAC,CACzCb,SAAS,CAACK,IACZ,CAAC,CACDN,UAAU,CAAC4B,SAAS,CAAC3C,QAAQ,CAACE,CAAC,CAAG,CAAC,GAAG,CACtCa,UAAU,CAAC2B,OAAO,CAAC/B,GAAG,CAACI,UAAU,CAAC4B,SAAS,CAAC,CAE5C5B,UAAU,CAAC6B,QAAQ,CAAG,GAAI,CAAA5D,KAAK,CAACuC,IAAI,CAClC,GAAI,CAAAvC,KAAK,CAAC0C,cAAc,CAAC,IAAI,CAAE,EAAE,CAAE,EAAE,CAAC,CACtCV,SAAS,CAACI,KACZ,CAAC,CACDL,UAAU,CAAC6B,QAAQ,CAAC5C,QAAQ,CAACE,CAAC,CAAG,CAAC,GAAG,CACrCa,UAAU,CAAC2B,OAAO,CAAC/B,GAAG,CAACI,UAAU,CAAC6B,QAAQ,CAAC,CAE3C7B,UAAU,CAAC8B,QAAQ,CAAG,GAAI,CAAA7D,KAAK,CAACuC,IAAI,CAClC,GAAI,CAAAvC,KAAK,CAAC6C,gBAAgB,CAAC,IAAI,CAAE,IAAI,CAAE,GAAG,CAAC,CAC3Cb,SAAS,CAACK,IACZ,CAAC,CACDN,UAAU,CAAC8B,QAAQ,CAAC7C,QAAQ,CAACE,CAAC,CAAG,CAAC,GAAG,CACrCa,UAAU,CAAC6B,QAAQ,CAACjC,GAAG,CAACI,UAAU,CAAC8B,QAAQ,CAAC,CAE5C9B,UAAU,CAAC+B,QAAQ,CAAG,GAAI,CAAA9D,KAAK,CAACuC,IAAI,CAClC,GAAI,CAAAvC,KAAK,CAACwC,WAAW,CAAC,GAAG,CAAE,GAAG,CAAE,GAAG,CAAC,CACpCR,SAAS,CAACC,IACZ,CAAC,CACDF,UAAU,CAAC+B,QAAQ,CAAC9C,QAAQ,CAACE,CAAC,CAAG,CAAC,GAAG,CACrCa,UAAU,CAAC+B,QAAQ,CAAC9C,QAAQ,CAACC,CAAC,CAAG,GAAG,CACpCc,UAAU,CAAC6B,QAAQ,CAACjC,GAAG,CAACI,UAAU,CAAC+B,QAAQ,CAAC,CAE5C;AACA/B,UAAU,CAACgC,QAAQ,CAAG,GAAI,CAAA/D,KAAK,CAACuC,IAAI,CAClC,GAAI,CAAAvC,KAAK,CAAC0C,cAAc,CAAC,IAAI,CAAE,EAAE,CAAE,EAAE,CAAC,CACtCV,SAAS,CAACI,KACZ,CAAC,CACDL,UAAU,CAACgC,QAAQ,CAAC/C,QAAQ,CAACc,GAAG,CAAC,GAAG,CAAE,CAAC,GAAG,CAAE,CAAC,CAAC,CAC9CC,UAAU,CAACO,KAAK,CAACX,GAAG,CAACI,UAAU,CAACgC,QAAQ,CAAC,CAEzChC,UAAU,CAACiC,UAAU,CAAG,GAAI,CAAAhE,KAAK,CAACuC,IAAI,CACpC,GAAI,CAAAvC,KAAK,CAAC6C,gBAAgB,CAAC,GAAG,CAAE,GAAG,CAAE,GAAG,CAAC,CACzCb,SAAS,CAACK,IACZ,CAAC,CACDN,UAAU,CAACiC,UAAU,CAAChD,QAAQ,CAACE,CAAC,CAAG,CAAC,GAAG,CACvCa,UAAU,CAACgC,QAAQ,CAACpC,GAAG,CAACI,UAAU,CAACiC,UAAU,CAAC,CAE9CjC,UAAU,CAACkC,SAAS,CAAG,GAAI,CAAAjE,KAAK,CAACuC,IAAI,CACnC,GAAI,CAAAvC,KAAK,CAAC0C,cAAc,CAAC,IAAI,CAAE,EAAE,CAAE,EAAE,CAAC,CACtCV,SAAS,CAACI,KACZ,CAAC,CACDL,UAAU,CAACkC,SAAS,CAACjD,QAAQ,CAACE,CAAC,CAAG,CAAC,GAAG,CACtCa,UAAU,CAACgC,QAAQ,CAACpC,GAAG,CAACI,UAAU,CAACkC,SAAS,CAAC,CAE7ClC,UAAU,CAACmC,SAAS,CAAG,GAAI,CAAAlE,KAAK,CAACuC,IAAI,CACnC,GAAI,CAAAvC,KAAK,CAAC6C,gBAAgB,CAAC,IAAI,CAAE,IAAI,CAAE,GAAG,CAAC,CAC3Cb,SAAS,CAACK,IACZ,CAAC,CACDN,UAAU,CAACmC,SAAS,CAAClD,QAAQ,CAACE,CAAC,CAAG,CAAC,GAAG,CACtCa,UAAU,CAACkC,SAAS,CAACtC,GAAG,CAACI,UAAU,CAACmC,SAAS,CAAC,CAE9CnC,UAAU,CAACoC,SAAS,CAAG,GAAI,CAAAnE,KAAK,CAACuC,IAAI,CACnC,GAAI,CAAAvC,KAAK,CAACwC,WAAW,CAAC,GAAG,CAAE,GAAG,CAAE,GAAG,CAAC,CACpCR,SAAS,CAACC,IACZ,CAAC,CACDF,UAAU,CAACoC,SAAS,CAACnD,QAAQ,CAACE,CAAC,CAAG,CAAC,GAAG,CACtCa,UAAU,CAACoC,SAAS,CAACnD,QAAQ,CAACC,CAAC,CAAG,GAAG,CACrCc,UAAU,CAACkC,SAAS,CAACtC,GAAG,CAACI,UAAU,CAACoC,SAAS,CAAC,CAE9C;AACA,KAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CAC5B,GAAI,CAAC/D,cAAc,CAAE,OAErB;AACA,KAAM,CAAAgE,YAAY,CAAIC,KAAK,EAAK,CAC9B,MAAQ,CAACA,KAAK,CAAG,EAAE,EAAI,GAAG,CAAItB,IAAI,CAACC,EAAE,CACvC,CAAC,CAED;AACA,GAAI5C,cAAc,CAACkE,QAAQ,CAAE,CAC3BxC,UAAU,CAACU,IAAI,CAACK,QAAQ,CAAC5B,CAAC,CAAGmD,YAAY,CAAChE,cAAc,CAACkE,QAAQ,CAAC,CACpE,CACA,GAAIlE,cAAc,CAACmE,SAAS,CAAE,CAC5BzC,UAAU,CAACU,IAAI,CAACK,QAAQ,CAACC,CAAC,CAAGsB,YAAY,CAAChE,cAAc,CAACmE,SAAS,CAAC,CACrE,CAEA;AACA,GAAInE,cAAc,CAACoE,aAAa,CAAE,CAChC1C,UAAU,CAACY,YAAY,CAACG,QAAQ,CAACC,CAAC,CAAGsB,YAAY,CAAChE,cAAc,CAACoE,aAAa,CAAC,CACjF,CACA,GAAIpE,cAAc,CAACqE,UAAU,CAAE,CAC7B3C,UAAU,CAACmB,SAAS,CAACJ,QAAQ,CAACC,CAAC,CAAGsB,YAAY,CAAChE,cAAc,CAACqE,UAAU,CAAC,CAC3E,CAEA;AACA,GAAIrE,cAAc,CAACsE,cAAc,CAAE,CACjC5C,UAAU,CAACsB,aAAa,CAACP,QAAQ,CAACC,CAAC,CAAGsB,YAAY,CAAChE,cAAc,CAACsE,cAAc,CAAC,CACnF,CACA,GAAItE,cAAc,CAACuE,WAAW,CAAE,CAC9B7C,UAAU,CAACwB,UAAU,CAACT,QAAQ,CAACC,CAAC,CAAGsB,YAAY,CAAChE,cAAc,CAACuE,WAAW,CAAC,CAC7E,CAEA;AACA,GAAIvE,cAAc,CAACwE,KAAK,CAAE,CACxB9C,UAAU,CAACO,KAAK,CAACQ,QAAQ,CAAC5B,CAAC,CAAGmD,YAAY,CAAChE,cAAc,CAACwE,KAAK,CAAC,CAClE,CACA,GAAIxE,cAAc,CAACyE,KAAK,CAAE,CACxB/C,UAAU,CAACO,KAAK,CAACQ,QAAQ,CAACC,CAAC,CAAGsB,YAAY,CAAChE,cAAc,CAACyE,KAAK,CAAC,CAAG,CAAC,CAAE;AACxE,CAEA;AACA,GAAIzE,cAAc,CAAC0E,QAAQ,CAAE,CAC3BhD,UAAU,CAAC2B,OAAO,CAACZ,QAAQ,CAACC,CAAC,CAAGsB,YAAY,CAAChE,cAAc,CAAC0E,QAAQ,CAAC,CACvE,CACA,GAAI1E,cAAc,CAAC2E,SAAS,CAAE,CAC5BjD,UAAU,CAAC6B,QAAQ,CAACd,QAAQ,CAACC,CAAC,CAAGsB,YAAY,CAAChE,cAAc,CAAC2E,SAAS,CAAC,CACzE,CACA,GAAI3E,cAAc,CAAC4E,UAAU,CAAE,CAC7BlD,UAAU,CAAC+B,QAAQ,CAAChB,QAAQ,CAACC,CAAC,CAAGsB,YAAY,CAAChE,cAAc,CAAC4E,UAAU,CAAC,CAC1E,CAEA;AACA,GAAI5E,cAAc,CAAC6E,SAAS,CAAE,CAC5BnD,UAAU,CAACgC,QAAQ,CAACjB,QAAQ,CAACC,CAAC,CAAGsB,YAAY,CAAChE,cAAc,CAAC6E,SAAS,CAAC,CACzE,CACA,GAAI7E,cAAc,CAAC8E,UAAU,CAAE,CAC7BpD,UAAU,CAACkC,SAAS,CAACnB,QAAQ,CAACC,CAAC,CAAGsB,YAAY,CAAChE,cAAc,CAAC8E,UAAU,CAAC,CAC3E,CACA,GAAI9E,cAAc,CAAC+E,WAAW,CAAE,CAC9BrD,UAAU,CAACoC,SAAS,CAACrB,QAAQ,CAACC,CAAC,CAAGsB,YAAY,CAAChE,cAAc,CAAC+E,WAAW,CAAC,CAC5E,CAEA;AACA,GAAI/E,cAAc,CAACgF,UAAU,CAAE,CAC7BtD,UAAU,CAACqB,QAAQ,CAACN,QAAQ,CAAC7B,CAAC,CAAGoD,YAAY,CAAChE,cAAc,CAACgF,UAAU,CAAC,CAC1E,CACA,GAAIhF,cAAc,CAACiF,WAAW,CAAE,CAC9BvD,UAAU,CAAC0B,SAAS,CAACX,QAAQ,CAAC7B,CAAC,CAAGoD,YAAY,CAAChE,cAAc,CAACiF,WAAW,CAAC,CAC5E,CACF,CAAC,CAED;AACAlB,eAAe,CAAC,CAAC,CAEjB;AACA,GAAI,CAAAmB,OAAO,CACX,KAAM,CAAAC,OAAO,CAAGA,CAAA,GAAM,CACpBD,OAAO,CAAGE,qBAAqB,CAACD,OAAO,CAAC,CAExC;AACAjF,KAAK,CAACuC,QAAQ,CAAC5B,CAAC,CAAG8B,IAAI,CAAC0C,GAAG,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,KAAK,CAAC,CAAG,GAAG,CAErDzE,QAAQ,CAAC0E,MAAM,CAACtF,KAAK,CAAEI,MAAM,CAAC,CAChC,CAAC,CAED6E,OAAO,CAAC,CAAC,CAET;AACA,KAAM,CAAAM,YAAY,CAAGA,CAAA,GAAM,CACzBnF,MAAM,CAACoF,MAAM,CAAGzF,QAAQ,CAACO,OAAO,CAACC,WAAW,CAAGR,QAAQ,CAACO,OAAO,CAACE,YAAY,CAC5EJ,MAAM,CAACqF,sBAAsB,CAAC,CAAC,CAC/B7E,QAAQ,CAACG,OAAO,CAAChB,QAAQ,CAACO,OAAO,CAACC,WAAW,CAAER,QAAQ,CAACO,OAAO,CAACE,YAAY,CAAC,CAC/E,CAAC,CAEDkF,MAAM,CAACC,gBAAgB,CAAC,QAAQ,CAAEJ,YAAY,CAAC,CAE/C;AACA,KAAM,CAAAK,iBAAiB,CAAGA,CAAA,GAAM,CAC9B/B,eAAe,CAAC,CAAC,CACnB,CAAC,CAED;AACA,KAAM,CAAAgC,aAAa,CAAGC,WAAW,CAACF,iBAAiB,CAAE,GAAG,CAAC,CAEzD;AACA,MAAO,IAAM,CACXG,aAAa,CAACF,aAAa,CAAC,CAC5BH,MAAM,CAACM,mBAAmB,CAAC,QAAQ,CAAET,YAAY,CAAC,CAClDU,oBAAoB,CAACjB,OAAO,CAAC,CAC7B,GAAIjF,QAAQ,CAACO,OAAO,CAAE,CACpBP,QAAQ,CAACO,OAAO,CAAC4F,WAAW,CAACtF,QAAQ,CAACK,UAAU,CAAC,CACnD,CACF,CAAC,CACH,CAAC,CAAE,CAACnB,cAAc,CAAC,CAAC,CAEpB,mBAAOH,IAAA,QAAKwG,GAAG,CAAEpG,QAAS,CAACqG,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAM,CAAEC,MAAM,CAAE,OAAQ,CAAE,CAAE,CAAC,CAC1E,CAAC,CAED,cAAe,CAAA1G,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}